// HTML和Body的默认字体大小，基本的REM值
$rem-base: 75px !default;
// 此处的75px，因为可以看到flexible.js将设计图（页面）平均10等分，一般设计稿的宽度为640，750，或1125px。此例中，宽度为750px ，把这宽度10等分，则每一份就是75px.即为1rem
// http://www.w3cplus.com/mobile/lib-flexible-for-html5-layout.html
$rem-rate: 1rem;
// 此处的rem-rate是旧版本的配置参数，不删除了。默认为1rem就可以。
// 返回计算
@function strip-unit($num) {
    @return $num / ($num * 0 + 1);
}

// 转化成REM值，特别注意$rem-rate！
@function convert-to-rem($value, $base-value: $rem-base) {
    $value: strip-unit($value) / strip-unit($base-value) * $rem-rate;
    @if ($value==0rem) {
        $value: 0;
    } // 设置 0rem 为 0
    @return $value;
}

// REM 计算函数
@function rem-calc($values, $base-value: $rem-base) {
    $max: length($values);
    @if $max==1 {
        @return convert-to-rem(nth($values, 1), $base-value);
    }
    $remValues: ();
    @for $i from 1 through $max {
        $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
    }
    @return $remValues;
}

@mixin px2rem($property, $px-values, $baseline-px:75px, $support-for-ie:false) {
    //Conver the baseline into rems
    $baseline-rem: $baseline-px / 1rem * 1;
    //Print the first line in pixel values
    @if $support-for-ie {
        #{$property}: $px-values;
    }
    //if there is only one (numeric) value, return the property/value line for it.
    @if type-of($px-values)=="number" {
        #{$property}: $px-values / $baseline-rem;
    }
    @else {
        //Create an empty list that we can dump values into
        $rem-values: ();
        @each $value in $px-values {
            // If the value is zero or not a number, return it
            @if $value==0 or type-of($value) !="number" {
                $rem-values: append($rem-values, $value / $baseline-rem);
            }
        }
        // Return the property and its list of converted values
        #{$property}: $rem-values;
    }
}

// ## 字号不使用rem
// 前面大家都见证了如何使用rem来完成H5适配。
// 那么文本又将如何处理适配。是不是也通过rem来做自动适配。 显然，我们在iPhone3G和iPhone4的Retina屏下面，希望看到的文本字号是相同的。也就是说，我们不希望文本在Retina屏幕下变小，另外，我们希望在大屏手机上看到更多文本，以及，现在绝大多数的字体文件都自带一些点阵尺寸，通常是16px和24px，所以我们不希望出现13px和15px这样的奇葩尺寸。 如此一来，就决定了在制作H5的页面中，rem并不适合用到段落文本上。所以在Flexible整个适配方案中，考虑文本还是使用px作为单位。只不过使用[data-dpr]属性来区分不同dpr下的文本字号大小。

@mixin font-dpr($font-size) {
    font-size: $font-size;
    [data-dpr="2"] & {
        font-size: $font-size * 2;
    }
    [data-dpr="3"] & {
        font-size: $font-size * 3;
    }
}
